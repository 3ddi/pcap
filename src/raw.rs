/* automatically generated by rust-bindgen */
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_bpf_program {
    pub bf_len: ::libc::c_uint,
    pub bf_insns: *mut Struct_bpf_insn,
}
impl ::std::default::Default for Struct_bpf_program {
    fn default() -> Struct_bpf_program { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_bpf_insn {
    pub code: ::libc::c_ushort,
    pub jt: ::libc::c_uchar,
    pub jf: ::libc::c_uchar,
    pub k: ::libc::c_uint,
}
impl ::std::default::Default for Struct_bpf_insn {
    fn default() -> Struct_bpf_insn { unsafe { ::std::mem::zeroed() } }
}

pub enum Struct_pcap { }
pub type pcap_t = Struct_pcap;
pub enum Struct_pcap_dumper { }
pub type pcap_dumper_t = Struct_pcap_dumper;
pub type pcap_if_t = Struct_pcap_if;
pub type pcap_addr_t = Struct_pcap_addr;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_pcap_file_header {
    pub magic: ::libc::c_uint,
    pub version_major: ::libc::c_ushort,
    pub version_minor: ::libc::c_ushort,
    pub thiszone: ::libc::c_int,
    pub sigfigs: ::libc::c_uint,
    pub snaplen: ::libc::c_uint,
    pub linktype: ::libc::c_uint,
}
impl ::std::default::Default for Struct_pcap_file_header {
    fn default() -> Struct_pcap_file_header {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pcap_direction_t = ::libc::c_uint;
pub const PCAP_D_INOUT: pcap_direction_t = 0;
pub const PCAP_D_IN: pcap_direction_t = 1;
pub const PCAP_D_OUT: pcap_direction_t = 2;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_pcap_pkthdr {
    pub ts: ::libc::timeval,
    pub caplen: ::libc::c_uint,
    pub len: ::libc::c_uint,
}
impl ::std::default::Default for Struct_pcap_pkthdr {
    fn default() -> Struct_pcap_pkthdr { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy, Clone)]
/// Represents a packet header provided by pcap, including the timeval, caplen and len.
pub struct PacketHeader {
    pub ts: ::libc::timeval,
    pub caplen: u32,
    pub len: u32,
}

impl ::std::fmt::Debug for PacketHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "PacketHeader {{ ts: {}.{:06}, caplen: {}, len: {} }}",
               self.ts.tv_sec, self.ts.tv_usec, self.caplen, self.len)
    }
}

impl PartialEq for PacketHeader {
    fn eq(&self, rhs: &PacketHeader) -> bool {
        self.ts.tv_sec == rhs.ts.tv_sec && self.ts.tv_usec == rhs.ts.tv_usec &&
            self.caplen == rhs.caplen && self.len == rhs.len
    }
}

impl Eq for PacketHeader {}

#[test]
fn packet_hdr_eq() {
    use std::mem::size_of;

    assert_eq!(size_of::<PacketHeader>(), size_of::<Struct_pcap_pkthdr>())
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_pcap_stat {
    pub ps_recv: ::libc::c_uint,
    pub ps_drop: ::libc::c_uint,
    pub ps_ifdrop: ::libc::c_uint,
}
impl ::std::default::Default for Struct_pcap_stat {
    fn default() -> Struct_pcap_stat { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_pcap_if {
    pub next: *mut Struct_pcap_if,
    pub name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub addresses: *mut Struct_pcap_addr,
    pub flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_pcap_if {
    fn default() -> Struct_pcap_if { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_pcap_addr {
    pub next: *mut Struct_pcap_addr,
    pub addr: *mut ::libc::sockaddr,
    pub netmask: *mut ::libc::sockaddr,
    pub broadaddr: *mut ::libc::sockaddr,
    pub dstaddr: *mut ::libc::sockaddr,
}
impl ::std::default::Default for Struct_pcap_addr {
    fn default() -> Struct_pcap_addr { unsafe { ::std::mem::zeroed() } }
}

pub type pcap_handler =
    Option<extern "C" fn (arg1: *mut ::libc::c_uchar,
                          arg2: *const Struct_pcap_pkthdr,
                          arg3: *const ::libc::c_uchar) -> ()>;

extern "C" {
    pub fn pcap_lookupdev(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    // pub fn pcap_lookupnet(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_uint,
    //                       arg3: *mut ::libc::c_uint, arg4: *mut ::libc::c_char)
    //  -> ::libc::c_int;
    pub fn pcap_create(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut pcap_t;
    pub fn pcap_set_snaplen(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_promisc(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    // pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_set_timeout(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    #[cfg(not(windows))]
    pub fn pcap_set_tstamp_type(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    // pub fn pcap_set_immediate_mode(arg1: *mut pcap_t, arg2: ::libc::c_int)
    //  -> ::libc::c_int;
    pub fn pcap_set_buffer_size(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    #[cfg(not(windows))]
    pub fn pcap_set_tstamp_precision(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    // pub fn pcap_get_tstamp_precision(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_activate(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_list_tstamp_types(arg1: *mut pcap_t,
    //                               arg2: *mut *mut ::libc::c_int)
    //  -> ::libc::c_int;
    // pub fn pcap_free_tstamp_types(arg1: *mut ::libc::c_int) -> ();
    // pub fn pcap_tstamp_type_name_to_val(arg1: *const ::libc::c_char)
    //  -> ::libc::c_int;
    // pub fn pcap_tstamp_type_val_to_name(arg1: ::libc::c_int)
    //  -> *const ::libc::c_char;
    // pub fn pcap_tstamp_type_val_to_description(arg1: ::libc::c_int)
    //  -> *const ::libc::c_char;
    // pub fn pcap_open_live(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
    //                       arg3: ::libc::c_int, arg4: ::libc::c_int,
    //                       arg5: *mut ::libc::c_char) -> *mut pcap_t;
    pub fn pcap_open_dead(arg1: ::libc::c_int, arg2: ::libc::c_int)
      -> *mut pcap_t;
    pub fn pcap_open_dead_with_tstamp_precision(arg1: ::libc::c_int,
                                                 arg2: ::libc::c_int,
                                                 arg3: ::libc::c_uint) -> *mut pcap_t;
    pub fn pcap_open_offline_with_tstamp_precision(arg1:
                                                       *const ::libc::c_char,
                                                   arg2: ::libc::c_uint,
                                                   arg3: *mut ::libc::c_char)
     -> *mut pcap_t;
    pub fn pcap_open_offline(arg1: *const ::libc::c_char,
                             arg2: *mut ::libc::c_char) -> *mut pcap_t;
    #[cfg(feature = "pcap-fopen-offline-precision")]
    pub fn pcap_fopen_offline_with_tstamp_precision(arg1: *mut ::libc::FILE,
                                                    arg2: ::libc::c_uint,
                                                    arg3: *mut ::libc::c_char)
     -> *mut pcap_t;
    pub fn pcap_fopen_offline(arg1: *mut ::libc::FILE, arg2: *mut ::libc::c_char)
     -> *mut pcap_t;
    pub fn pcap_close(arg1: *mut pcap_t) -> ();
    // pub fn pcap_loop(arg1: *mut pcap_t, arg2: ::libc::c_int,
    //                  arg3: pcap_handler, arg4: *mut ::libc::c_uchar) -> ::libc::c_int;
    // pub fn pcap_dispatch(arg1: *mut pcap_t, arg2: ::libc::c_int,
    //                      arg3: pcap_handler, arg4: *mut ::libc::c_uchar)
    //  -> ::libc::c_int;
    // pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut Struct_pcap_pkthdr)
    //  -> *const ::libc::c_uchar;
    pub fn pcap_next_ex(arg1: *mut pcap_t, arg2: *mut *mut Struct_pcap_pkthdr,
                        arg3: *mut *const ::libc::c_uchar) -> ::libc::c_int;
    // pub fn pcap_breakloop(arg1: *mut pcap_t) -> ();
    pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut Struct_pcap_stat)
     -> ::libc::c_int;
    pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program)
     -> ::libc::c_int;
    pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t)
     -> ::libc::c_int;
    // pub fn pcap_getnonblock(arg1: *mut pcap_t, arg2: *mut ::libc::c_char)
    //  -> ::libc::c_int;
    // pub fn pcap_setnonblock(arg1: *mut pcap_t, arg2: ::libc::c_int,
    //                         arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pcap_sendpacket(arg1: *mut pcap_t, arg2: *const ::libc::c_uchar,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    // pub fn pcap_statustostr(arg1: ::libc::c_int) -> *const ::libc::c_char;
    // pub fn pcap_strerror(arg1: ::libc::c_int) -> *const ::libc::c_char;
    pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut ::libc::c_char;
    // pub fn pcap_perror(arg1: *mut pcap_t, arg2: *mut ::libc::c_char) -> ();
    pub fn pcap_compile(arg1: *mut pcap_t, arg2: *mut Struct_bpf_program,
                        arg3: *const ::libc::c_char, arg4: ::libc::c_int,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    // pub fn pcap_compile_nopcap(arg1: ::libc::c_int, arg2: ::libc::c_int,
    //                            arg3: *mut Struct_bpf_program,
    //                            arg4: *const ::libc::c_char,
    //                            arg5: ::libc::c_int, arg6: ::libc::c_uint)
    //  -> ::libc::c_int;
    pub fn pcap_freecode(arg1: *mut Struct_bpf_program) -> ();
    // pub fn pcap_offline_filter(arg1: *const Struct_bpf_program,
    //                            arg2: *const Struct_pcap_pkthdr,
    //                            arg3: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn pcap_datalink(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_list_datalinks(arg1: *mut pcap_t,
                               arg2: *mut *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_set_datalink(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pcap_free_datalinks(arg1: *mut ::libc::c_int) -> ();
    // pub fn pcap_datalink_name_to_val(arg1: *const ::libc::c_char)
    //  -> ::libc::c_int;
    pub fn pcap_datalink_val_to_name(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pcap_datalink_val_to_description(arg1: ::libc::c_int)
     -> *const ::libc::c_char;
    // pub fn pcap_snapshot(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_is_swapped(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_major_version(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_minor_version(arg1: *mut pcap_t) -> ::libc::c_int;
    // pub fn pcap_file(arg1: *mut pcap_t) -> *mut ::libc::FILE;
    pub fn pcap_fileno(arg1: *mut pcap_t) -> ::libc::c_int;
    pub fn pcap_dump_open(arg1: *mut pcap_t, arg2: *const ::libc::c_char)
     -> *mut pcap_dumper_t;
    pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut ::libc::FILE)
     -> *mut pcap_dumper_t;
    #[cfg(feature = "pcap-savefile-append")]
    pub fn pcap_dump_open_append(arg1: *mut pcap_t, arg2: *const ::libc::c_char)
     -> *mut pcap_dumper_t;
    // pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut ::libc::FILE;
    // pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> ::libc::c_long;
    // pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> ::libc::c_int;
    pub fn pcap_dump_close(arg1: *mut pcap_dumper_t) -> ();
    pub fn pcap_dump(arg1: *mut ::libc::c_uchar, arg2: *const Struct_pcap_pkthdr,
                     arg3: *const ::libc::c_uchar) -> ();
    pub fn pcap_findalldevs(arg1: *mut *mut pcap_if_t,
                             arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pcap_freealldevs(arg1: *mut pcap_if_t) -> ();
    // pub fn pcap_lib_version() -> *const ::libc::c_char;
    // pub fn bpf_image(arg1: *const Struct_bpf_insn, arg2: ::libc::c_int)
    //  -> *mut ::libc::c_char;
    // pub fn bpf_dump(arg1: *const Struct_bpf_program, arg2: ::libc::c_int)
    //  -> ();
    // pub fn pcap_get_selectable_fd(arg1: *mut pcap_t) -> ::libc::c_int;
}

#[cfg(windows)]
#[link(name = "wpcap")]
extern {}

#[cfg(not(windows))]
#[link(name = "pcap")]
extern {
    // pub fn pcap_inject(arg1: *mut pcap_t, arg2: *const ::libc::c_void,
    //                    arg3: size_t) -> ::libc::c_int;

    pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
}
